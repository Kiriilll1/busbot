import sqlite3
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, executor
from bust import user_task
from bottkn import bot
from sqlbus import db_create_user
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.web_app_info import WebAppInfo


logging.basicConfig(level=logging.INFO)

dp=Dispatcher(bot)


#celery —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–≥ 
#butefuelsoup


@dp.message_handler(text=['C–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚è∞'])
async def send_buss(message:types.Message):
    ###user_task()
    keyboard=InlineKeyboardMarkup()
    button1=InlineKeyboardButton("50", callback_data="bus_50")
    button2=InlineKeyboardButton("2", callback_data="2")
    keyboard.add(button1,button2)
    await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–µ—Ç–µ –∞–≤—Ç–æ–±—É—Å',reply_markup=keyboard)

@dp.callback_query_handler(text="bus_50")
async def bus_50(callback: types.CallbackQuery):
    user_task()
    keyboard=InlineKeyboardMarkup()
    button1=InlineKeyboardButton("–°–∏–Ω—Ç–µ–∑",callback_data='x')
    button2=InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –¢—É—Ä–±–∏–Ω–∫–∞",callback_data='x')
    button3=InlineKeyboardButton("–•–ª–µ–±–æ–∫–æ–º–±–∏–Ω–∞—Ç ‚Ññ1",callback_data='x')
    button4=InlineKeyboardButton("–û—Ä–ª–æ–≤–∞",callback_data='x')
    button5=InlineKeyboardButton("–°—Ç–∞–¥–∏–æ–Ω –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π",callback_data='x')
    keyboard.add(button1, button2, button3, button4, button5)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É",reply_markup=keyboard)



@dp.message_handler(commands=['start'])
async def send_welcom(message:types.Message):
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º –∞–≤—Ç–æ–±—É—Å–∞")
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç", request_location=True)
    task_user=types.KeyboardButton(text='C–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚è∞')
    keyboard.add(button_geo,task_user)
    await bot.send_message(message.chat.id,"–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", reply_markup=keyboard)


@dp.message_handler(content_types=["location"])
async def location(message):
    if message.location is not None:
        lat=message.location.latitude
        lon=message.location.longitude
        print("latitude: %s; longitude: %s" % (message.location.latitude, message.location.longitude))
        await bot.send_location(message.chat.id, lat, lon)
        await message.answer("–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–∞",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞",
        web_app=WebAppInfo(url="https://2gis.ru/kurgan"))))
        user_id=message.from_user.id
        latitude=message.location.latitude 
        longitude=message.location.longitude
        db_create_user(user_id=user_id,latitude=lat,longitude=lon)


    """webKeyboard=types.ReplyKeyboardMarkup(row_width=1)
    webAppTest=types.WebAppInfo("http://localhost:3000/")
    one_butt=types.KeyboardButton(text="Test", web_app=webAppTest)
    keyboard.add(one_butt)
    return keyboard"""



#@dp.message_handler(commands=['location'])
#async def send_location(message:types.Location):
#    await bot.send_message(message.chat,'—ç—Ç–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è')

@dp.message_handler(content_types=["text"])
async def handle_text(message):
    await bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è!')
    print(message.chat.id,":" ,message.text)




async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

input()
